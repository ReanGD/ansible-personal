---
- name: Install package refind
  pkg_manager:
    name: refind
    command: install
  become: true
  become_user: "{{ install_user }}"

- name: Check that the /boot/efi/EFI exists
  ansible.builtin.stat:
    path: /boot/efi/EFI
    get_checksum: false
    get_mime: false
  register: reg_efi_installed
  become: true

- name: Find efi partition name
  ansible.builtin.command: findmnt -o SOURCE --noheadings /boot/efi
  register: efi_partition_name_reg
  become: true
  changed_when: false

- name: Find root partition uuid
  ansible.builtin.command: findmnt -o UUID --noheadings /
  register: root_partition_uuid_reg
  become: true
  changed_when: false

- name: Find home partition uuid
  ansible.builtin.command: findmnt -o UUID --noheadings /home
  register: home_partition_uuid_reg
  become: true
  changed_when: false
  failed_when: home_partition_uuid_reg.rc > 1

- name: Set partitions facts
  ansible.builtin.set_fact:
    efi_partition_name: "{{ efi_partition_name_reg.stdout }}"
    root_partition_uuid: "{{ root_partition_uuid_reg.stdout }}"
    home_partition_uuid: "{{ home_partition_uuid_reg.stdout }}"
    conf_path: "{% if 'nvram_write_disable' in boot.split(',') %}/boot/efi/EFI/BOOT/refind.conf{% else %}/boot/efi/EFI/refind/refind.conf{% endif %}"
    nvidia_drm_modeset: "{% if 'nvidia' in hardware.split(',') %} nvidia_drm.modeset=1{% else %}{% endif %}"

- name: UEFI install for nvram write disable
  ansible.builtin.command: refind-install --usedefault {{ efi_partition_name }} --alldrivers
  when: "'nvram_write_disable' in boot.split(',') and not reg_efi_installed.stat.exists"
  become: true

- name: UEFI install for nvram write enable
  ansible.builtin.command: refind-install --alldrivers
  when: "'nvram_write_enble' in boot.split(',') and not reg_efi_installed.stat.exists"
  become: true

- name: Create refind_linux config without crypto_home
  ansible.builtin.template:
    src: refind_linux.conf
    dest: /boot/refind_linux.conf
    group: root
    owner: root
    mode: "0644"
  when: "'crypto_home' not in boot.split(',')"
  become: true

- name: Create refind_linux config with crypto_home
  ansible.builtin.template:
    src: refind_linux_crypto_home.conf
    dest: /boot/refind_linux.conf
    group: root
    owner: root
    mode: "0644"
  when: "'crypto_home' in boot.split(',')"
  become: true

- name: Update refind timeout
  ansible.builtin.lineinfile:
    regexp: "^timeout .*$"
    line: "timeout 1"
    path: "{{conf_path}}"
  become: true

- name: Use refind textonly mode
  ansible.builtin.lineinfile:
    regexp: "^#textonly$"
    line: "textonly"
    path: "{{conf_path}}"
  when: "'textonly' in boot.split(',')"
  become: true
